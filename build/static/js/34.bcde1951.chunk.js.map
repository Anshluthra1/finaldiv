{"version":3,"sources":["components/Tooltip.js","components/StateMetaCard.js","../node_modules/react-feather/dist/icons/compass.js","components/StateMeta.js"],"names":["Tooltip","data","children","useState","isTooltipVisible","setIsTooltipVisible","transitions","useTransition","from","TOOLTIP_FADE_OUT","enter","TOOLTIP_FADE_IN","leave","config","mass","tension","friction","handleClick","useCallback","e","stopPropagation","className","style","position","onMouseEnter","bind","onMouseLeave","onClick","item","div","dangerouslySetInnerHTML","__html","replace","StateMetaCard","title","statistic","total","formula","date","description","t","useTranslation","size","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Compass","forwardRef","_ref","ref","_ref$color","color","_ref$size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","points","propTypes","PropTypes","string","oneOfType","number","displayName","StateMeta","stateCode","timeseries","pastDates","filter","getIndiaDateYesterdayISO","lastDate","lastConfirmed","getStatistic","prevWeekConfirmed","prevWeekDate","formatISO","subDays","parseIndiaDate","confirmedPerMillion","perMillion","testPerMillion","totalConfirmedPerMillion","activePercent","recoveryPercent","deathPercent","growthRate","Math","pow","formatNumber","meta","population","href","round","STATE_NAMES","formatDate","formatLastUpdated","tested","isEqual","prevProps","currProps","memo"],"mappings":"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","file":"static/js/34.bcde1951.chunk.js","sourcesContent":["import {TOOLTIP_FADE_IN, TOOLTIP_FADE_OUT} from '../animations';\n\nimport {useCallback, useState} from 'react';\nimport {useTransition, animated} from 'react-spring';\n\nconst Tooltip = ({data, children}) => {\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const transitions = useTransition(isTooltipVisible, {\n    from: TOOLTIP_FADE_OUT,\n    enter: TOOLTIP_FADE_IN,\n    leave: TOOLTIP_FADE_OUT,\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <span\n      className=\"Tooltip\"\n      style={{position: 'relative'}}\n      onMouseEnter={setIsTooltipVisible.bind(this, true)}\n      onMouseLeave={setIsTooltipVisible.bind(this, false)}\n      onClick={handleClick.bind(this)}\n    >\n      {children}\n\n      {transitions(\n        (style, item) =>\n          item && (\n            <animated.div {...{style}}>\n              <div className=\"message\">\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: data.replace(/\\n/g, '<br/>'),\n                  }}\n                ></p>\n              </div>\n            </animated.div>\n          )\n      )}\n    </span>\n  );\n};\n\nexport default Tooltip;\n","import Tooltip from './Tooltip';\n\nimport {InfoIcon} from '@primer/octicons-react';\nimport {useTranslation} from 'react-i18next';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  const {t} = useTranslation();\n\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <Tooltip {...{data: formula}}>\n          <InfoIcon size={16} />\n        </Tooltip>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`${t('India has')} ${total} ${t('CPM')}`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Compass = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"\n  }));\n});\nCompass.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCompass.displayName = 'Compass';\nexport default Compass;","import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {formatISO, subDays} from 'date-fns';\nimport {memo} from 'react';\nimport {Compass} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const {t} = useTranslation();\n\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaDateYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const lastConfirmed = getStatistic(\n    timeseries?.[lastDate],\n    'total',\n    'confirmed'\n  );\n  const prevWeekConfirmed =\n    lastConfirmed - getStatistic(timeseries?.[lastDate], 'delta7', 'confirmed');\n\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 7));\n\n  const confirmedPerMillion = getStatistic(\n    data[stateCode],\n    'total',\n    'confirmed',\n    {perMillion: true}\n  );\n  const testPerMillion = getStatistic(data[stateCode], 'total', 'tested', {\n    perMillion: true,\n  });\n  const totalConfirmedPerMillion = getStatistic(\n    data['TT'],\n    'total',\n    'confirmed',\n    {perMillion: true}\n  );\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  const growthRate =\n    (Math.pow(lastConfirmed / prevWeekConfirmed, 1 / 7) - 1) * 100;\n\n  return (\n    <>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>{t('Population')}</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            {t('Based on 2019 population projection by NCP')}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={formatNumber(confirmedPerMillion)}\n          total={formatNumber(totalConfirmedPerMillion)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ~${formatNumber(Math.round(confirmedPerMillion))} ${t(\n            'out of every 10 lakh people in'\n          )} ${STATE_NAMES[stateCode]} ${t(\n            'have tested positive for the virus.'\n          )}\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active Ratio'}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={'(active / confirmed) * 100'}\n          description={\n            activePercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  Math.round(activePercent)\n                )} ${t('are currently infected.')}`\n              : t('Currently, there are no active cases in this state.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Ratio'}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={'(recovered / confirmed) * 100'}\n          description={\n            recoveryPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  Math.round(recoveryPercent)\n                )} ${t('have recovered from the virus.')}`\n              : t('Unfortunately, there are no recoveries in this state yet.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Case Fatality Ratio'}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={'(deceased / confirmed) * 100'}\n          description={\n            deathPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  Math.round(deathPercent)\n                )} ${t('have unfortunately passed away from the virus.')}`\n              : t(\n                  'Fortunately, no one has passed away from the virus in this state.'\n                )\n          }\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${formatNumber(growthRate, '%')}` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            growthRate > 0\n              ? `${t(\n                  'In the last one week, the number of new infections has grown by an average of'\n                )} ${formatNumber(growthRate, '%')}\n              ${t('every day.')}`\n              : t(\n                  'There has been no growth in the number of infections in last one week.'\n                )\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`${formatNumber(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={\n            testPerMillion\n              ? `${t('As of')} ${formatLastUpdated(\n                  data[stateCode]?.meta?.tested?.['last_updated']\n                )} ${t('ago')}`\n              : ''\n          }\n          description={\n            testPerMillion > 0\n              ? `${t('For every 10 lakh people in')} ${STATE_NAMES[stateCode]},\n                ~${formatNumber(Math.round(testPerMillion))} ${t(\n                  'samples were tested.'\n                )}`\n              : t('No tests have been conducted in this state yet.')\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(StateMeta, isEqual);\n"],"sourceRoot":""}