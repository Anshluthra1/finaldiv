{"version":3,"sources":["components/ActionsPanel.js","components/Actions.js"],"names":["Timeline","lazy","retry","ActionsPanel","lastViewedLog","newUpdate","isTimelineMode","setIsTimelineMode","showUpdates","date","setDate","dates","setNewUpdate","setShowUpdates","t","useTranslation","trail","useMemo","styles","map","element","index","push","animationDelay","handleTimelineClick","useCallback","handleBellClick","className","style","opacity","transform","pointerEvents","lastViewedDate","utcToZonedTime","parse","Date","formatDate","getTimeFromMilliseconds","onClick","size","fallback","Updates","Actions","useState","useLocalStorage","setLastViewedLog","updates","useSWR","API_DOMAIN","fetcher","revalidateOnFocus","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","isEqual","prevProps","currProps","equal","memo"],"mappings":"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","file":"static/js/37.b8232405.chunk.js","sourcesContent":["import {formatDate, retry} from '../utils/commonFunctions';\n\nimport {BellIcon, BellSlashIcon, HistoryIcon} from '@primer/octicons-react';\nimport {parse} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport {useMemo, useCallback, lazy, Suspense} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nconst Timeline = lazy(() => retry(() => import('./Timeline')));\n\nconst ActionsPanel = ({\n  lastViewedLog,\n  newUpdate,\n  isTimelineMode,\n  setIsTimelineMode,\n  showUpdates,\n  date,\n  setDate,\n  dates,\n  setNewUpdate,\n  setShowUpdates,\n}) => {\n  const {t} = useTranslation();\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${500 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const getTimeFromMilliseconds = (lastViewedLog) => {\n    const lastViewedDate = utcToZonedTime(\n      parse(lastViewedLog, 'T', new Date()),\n      'Asia/Kolkata'\n    );\n    return formatDate(lastViewedDate, 'dd MMM, p');\n  };\n\n  const handleTimelineClick = useCallback(() => {\n    setIsTimelineMode(true);\n    if (showUpdates) setShowUpdates(!showUpdates);\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\n\n  const handleBellClick = useCallback(() => {\n    if (!showUpdates) setNewUpdate(false);\n    setShowUpdates(!showUpdates);\n  }, [showUpdates, setShowUpdates, setNewUpdate]);\n\n  return (\n    <div className=\"ActionsPanel\">\n      <div\n        className=\"actions\"\n        style={{\n          opacity: isTimelineMode ? 0 : 1,\n          transform: `perspective(600px) rotateX(${\n            isTimelineMode ? 90 : 0\n          }deg)`,\n          pointerEvents: isTimelineMode ? 'none' : '',\n        }}\n      >\n        <h5 className=\"fadeInUp\" style={trail[0]}>{`${getTimeFromMilliseconds(\n          lastViewedLog\n        )} ${t('IST')}`}</h5>\n\n        <div\n          className=\"bell-icon fadeInUp\"\n          style={trail[1]}\n          onClick={handleBellClick}\n        >\n          {!showUpdates ? <BellIcon size={15} /> : <BellSlashIcon size={15} />}\n          {newUpdate && <div className=\"indicator\"></div>}\n        </div>\n\n        <div\n          className=\"timeline-icon fadeInUp\"\n          onClick={handleTimelineClick}\n          style={trail[2]}\n        >\n          {<HistoryIcon />}\n        </div>\n      </div>\n\n      {isTimelineMode && (\n        <Suspense fallback={<div />}>\n          <Timeline\n            {...{date, setDate, dates, isTimelineMode, setIsTimelineMode}}\n          />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default ActionsPanel;\n","import ActionsPanel from './ActionsPanel';\n\nimport {API_DOMAIN} from '../constants';\nimport {fetcher, retry} from '../utils/commonFunctions';\n\nimport equal from 'fast-deep-equal';\nimport {memo, useState, useEffect, lazy, Suspense} from 'react';\nimport {useLocalStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst Updates = lazy(() => retry(() => import('./Updates')));\n\nconst Actions = ({date, setDate, dates}) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const {data: updates} = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\n    revalidateOnFocus: true,\n  });\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastViewedLog,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          date,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{updates}} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n"],"sourceRoot":""}